// Enhanced Admin Panel Manager
// Int√©gration am√©lior√©e avec WindowManager

// Gestionnaire du panneau d'administration avec API moderne
const AdminPanelManager = {
  // Configuration
  config: {
    defaultWidth: 750,
   // Chargement du formulaire film
  loadFilmForm(filmId = null) {
    console.log(`üé¨ Chargement du formulaire film (id: ${filmId})`);
    this.state.activeTab = 'film-form';
    this.state.editingItem = filmId;
    this.state.itemType = 'film';
    
    // Trouver le film √† √©diter
    let filmToEdit = null;
    if (filmId && typeof window.films !== 'undefined') {
      filmToEdit = window.films.find(f => f.id === filmId);
    }ight: 550,
    minWidth: 600,
    minHeight: 400
  },
  
  // √âtat interne
  state: {
    activeTab: 'dashboard',
    editingItem: null,
    itemType: null,
    isUploading: false
  },
  
  // Initialisation du gestionnaire
  init() {
    console.log("üöÄ Initialisation du gestionnaire de panneau d'administration");
    
    // V√©rifier le token GitHub
    this.checkGitHubToken();
    
    // Stocker la fonction originale si elle existe
    if (typeof window.originalCreateAdminPanelWindow === 'undefined' && typeof window.createAdminPanelWindow === 'function') {
      window.originalCreateAdminPanelWindow = window.createAdminPanelWindow;
      console.log("üìù Fonction originale sauvegard√©e");
    }
    
    // Remplacer la fonction globale par notre impl√©mentation
    window.createAdminPanelWindow = this.createPanel.bind(this);
  },
  
  // V√©rification du token GitHub
  checkGitHubToken() {
    // R√©cup√©rer le token depuis le stockage
    const token = localStorage.getItem('github_token') || sessionStorage.getItem('github_token');
    
    if (typeof GITHUB_CONFIG !== 'undefined') {
      GITHUB_CONFIG.token = token;
    }
    
    console.log(`üîë Token GitHub ${token ? 'pr√©sent' : 'manquant'}`);
  },
  
  // Cr√©ation du panneau d'administration
  createPanel(editItemId = null, itemType = 'film') {
    console.log(`üìù Cr√©ation du panneau d'administration (type: ${itemType}, id: ${editItemId})`);
    
    // Mettre √† jour l'√©tat
    this.state.editingItem = editItemId;
    this.state.itemType = itemType;
    
    // G√©n√©rer le contenu HTML de base
    const content = this.generatePanelHTML();
    
    // Cr√©er la fen√™tre avec WindowManager si disponible
    let win;
    try {
      if (typeof WindowManager !== 'undefined' && typeof WindowManager.createWindow === 'function') {
        win = WindowManager.createWindow({
          title: 'Panneau d\'administration',
          icon: 'icons/key.png',
          width: `${this.config.defaultWidth}px`,
          height: `${this.config.defaultHeight}px`,
          content: content,
          minWidth: this.config.minWidth,
          minHeight: this.config.minHeight,
          onClose: () => {
            if (this.state.isUploading) {
              if (confirm('Un upload est en cours. √ätes-vous s√ªr de vouloir fermer cette fen√™tre?')) {
                return true;
              }
              return false;
            }
            return true;
          }
        });
      } else {
        // Fallback au cas o√π WindowManager n'est pas disponible
        console.log("‚ö†Ô∏è WindowManager non disponible, utilisation de la m√©thode alternative");
        win = this.createLegacyWindow(content);
      }
    } catch (error) {
      console.error("Erreur lors de la cr√©ation de la fen√™tre:", error);
      win = this.createLegacyWindow(content);
    }
    
    // Initialiser les gestionnaires d'√©v√©nements apr√®s un court d√©lai
    setTimeout(() => {
      this.initEventHandlers();
      
      // Charger l'interface appropri√©e selon l'√©tat
      if (editItemId) {
        if (itemType === 'film') {
          this.loadFilmEditForm(editItemId);
        } else if (itemType === 'manga') {
          this.loadMangaEditForm(editItemId);
        }
      } else {
        this.loadDashboard();
      }
    }, 100);
    
    return win;
  },
  
  // G√©n√©ration du HTML de base pour le panneau
  generatePanelHTML() {
    return `
      <div class="admin-panel">
        <div class="admin-toolbar" style="background:#ECE9D8;border-bottom:1px solid #ACA899;padding:10px;display:flex;gap:5px;flex-wrap:wrap;">
          <button id="btn-dashboard" class="admin-btn" style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
            Dashboard
          </button>
          <button id="btn-add-film" class="admin-btn" style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
            Ajouter Film
          </button>
          <button id="btn-list-films" class="admin-btn" style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
            G√©rer Films
          </button>
          <button id="btn-add-manga" class="admin-btn" style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
            Ajouter Manga
          </button>
          <button id="btn-list-mangas" class="admin-btn" style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
            G√©rer Mangas
          </button>
          <button id="btn-manage-tags" class="admin-btn" style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
            G√©rer Tags
          </button>
          <button id="btn-manage-articles" class="admin-btn" style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
            G√©rer Articles
          </button>
          <button id="btn-github-token" class="admin-btn" style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
            Token GitHub
          </button>
        </div>
        <div id="admin-content" style="padding:15px;height:calc(100% - 50px);overflow-y:auto;">
          <div class="loading-indicator" style="text-align:center;padding:20px;">
            <p>Chargement en cours...</p>
          </div>
        </div>
      </div>
    `;
  },
  
  // Initialisation des gestionnaires d'√©v√©nements
  initEventHandlers() {
    console.log("üîÑ Initialisation des gestionnaires d'√©v√©nements");
    
    // Boutons de la barre d'outils
    document.getElementById('btn-dashboard')?.addEventListener('click', () => this.loadDashboard());
    document.getElementById('btn-add-film')?.addEventListener('click', () => this.loadFilmForm());
    document.getElementById('btn-list-films')?.addEventListener('click', () => this.loadFilmsList());
    document.getElementById('btn-add-manga')?.addEventListener('click', () => this.loadMangaForm());
    document.getElementById('btn-list-mangas')?.addEventListener('click', () => this.loadMangasList());
    document.getElementById('btn-manage-tags')?.addEventListener('click', () => this.loadTagsManager());
    document.getElementById('btn-manage-articles')?.addEventListener('click', () => this.loadArticlesManager());
    document.getElementById('btn-github-token')?.addEventListener('click', () => this.loadTokenManager());
  },
  
  // Chargement du tableau de bord
  loadDashboard() {
    console.log("üìä Chargement du tableau de bord");
    this.state.activeTab = 'dashboard';
    
    const contentDiv = document.getElementById('admin-content');
    if (!contentDiv) return;
    
    // Obtenir les statistiques
    const filmCount = typeof films !== 'undefined' ? films.length : 0;
    const mangaCount = typeof mangas !== 'undefined' ? mangas.length : 0;
    const articleCount = typeof articles !== 'undefined' ? articles.length : 0;
    
    // G√©n√©rer le HTML du tableau de bord
    contentDiv.innerHTML = `
      <h3 style="color:#0058a8;margin-top:0;border-bottom:1px solid #ACA899;padding-bottom:5px;margin-bottom:15px;">
        Tableau de bord
      </h3>
      
      <div class="dashboard-stats" style="display:flex;flex-wrap:wrap;gap:15px;margin-bottom:20px;">
        <div class="stat-card" style="flex:1;min-width:150px;background:#f5f5f5;border:1px solid #ddd;border-radius:5px;padding:15px;text-align:center;">
          <h4 style="margin-top:0;color:#333;">Films</h4>
          <p style="font-size:24px;font-weight:bold;margin:5px 0;">${filmCount}</p>
        </div>
        
        <div class="stat-card" style="flex:1;min-width:150px;background:#f5f5f5;border:1px solid #ddd;border-radius:5px;padding:15px;text-align:center;">
          <h4 style="margin-top:0;color:#333;">Mangas</h4>
          <p style="font-size:24px;font-weight:bold;margin:5px 0;">${mangaCount}</p>
        </div>
        
        <div class="stat-card" style="flex:1;min-width:150px;background:#f5f5f5;border:1px solid #ddd;border-radius:5px;padding:15px;text-align:center;">
          <h4 style="margin-top:0;color:#333;">Articles</h4>
          <p style="font-size:24px;font-weight:bold;margin:5px 0;">${articleCount}</p>
        </div>
      </div>
      
      <h4 style="color:#333;border-bottom:1px solid #ddd;padding-bottom:5px;">Actions rapides</h4>
      <div class="quick-actions" style="display:flex;flex-wrap:wrap;gap:10px;margin-top:15px;">
        <button id="quick-add-film" style="padding:8px 15px;background:#0058a8;color:white;border:1px solid #003f7d;border-radius:3px;cursor:pointer;">
          + Nouveau film
        </button>
        <button id="quick-add-manga" style="padding:8px 15px;background:#0058a8;color:white;border:1px solid #003f7d;border-radius:3px;cursor:pointer;">
          + Nouveau manga
        </button>
        <button id="quick-save-data" style="padding:8px 15px;background:#4CAF50;color:white;border:1px solid #388E3C;border-radius:3px;cursor:pointer;">
          Sauvegarder donn√©es
        </button>
      </div>
      
      <div class="github-status" style="margin-top:25px;padding:10px;background:#f8f8f8;border:1px solid #ddd;border-radius:3px;">
        <h4 style="margin-top:0;color:#333;">Statut GitHub</h4>
        <p>
          Token: <span id="github-token-status">${GITHUB_CONFIG.token ? '‚úÖ Configur√©' : '‚ùå Non configur√©'}</span>
        </p>
      </div>
    `;
    
    // Ajouter les gestionnaires d'√©v√©nements pour les actions rapides
    document.getElementById('quick-add-film')?.addEventListener('click', () => this.loadFilmForm());
    document.getElementById('quick-add-manga')?.addEventListener('click', () => this.loadMangaForm());
    document.getElementById('quick-save-data')?.addEventListener('click', () => this.saveAllData());
  },
  
  // Formulaire pour ajouter/modifier un film
  loadFilmForm(filmId = null) {
    console.log(`üé¨ Chargement du formulaire film (id: ${filmId})`);
    this.state.activeTab = 'film-form';
    this.state.editingItem = filmId;
    this.state.itemType = 'film';
    
    // Trouver le film √† √©diter
    let filmToEdit = null;
    if (filmId && typeof films !== 'undefined') {
      filmToEdit = films.find(f => f.id === filmId);
    }
    
    const contentDiv = document.getElementById('admin-content');
    if (!contentDiv) return;
    
    // G√©n√©rer le HTML du formulaire
    contentDiv.innerHTML = `
      <h3 style="color:#0058a8;margin-top:0;border-bottom:1px solid #ACA899;padding-bottom:5px;margin-bottom:15px;">
        ${filmId ? 'Modifier' : 'Ajouter'} un film
      </h3>
      
      <form id="film-form">
        <div style="margin-bottom:15px;">
          <label for="film-titre" style="display:block;margin-bottom:5px;font-weight:bold;">Titre</label>
          <input type="text" id="film-titre" name="titre" value="${filmToEdit ? filmToEdit.titre : ''}" 
            style="width:100%;padding:5px;border:1px solid #ACA899;border-radius:3px;" required>
        </div>
        
        <div style="margin-bottom:15px;">
          <label for="film-note" style="display:block;margin-bottom:5px;font-weight:bold;">Note (1-5)</label>
          <input type="number" id="film-note" name="note" min="0" max="5" value="${filmToEdit ? filmToEdit.note : 0}" 
            style="width:60px;padding:5px;border:1px solid #ACA899;border-radius:3px;">
        </div>
        
        <div style="margin-bottom:15px;">
          <label for="film-critique" style="display:block;margin-bottom:5px;font-weight:bold;">Critique</label>
          <textarea id="film-critique" name="critique" rows="4" 
            style="width:100%;padding:5px;border:1px solid #ACA899;border-radius:3px;">${filmToEdit ? filmToEdit.critique : ''}</textarea>
        </div>
        
        <div style="margin-bottom:15px;">
          <label for="film-image" style="display:block;margin-bottom:5px;font-weight:bold;">URL de l'image</label>
          <input type="text" id="film-image" name="image" value="${filmToEdit ? filmToEdit.image : ''}" 
            style="width:100%;padding:5px;border:1px solid #ACA899;border-radius:3px;">
          
          <div style="display:flex;gap:10px;margin-top:8px;">
            <input type="file" id="film-image-upload" accept="image/*" style="display:none;">
            <button type="button" id="film-browse-btn" 
              style="padding:4px 10px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">Parcourir...</button>
            <button type="button" id="film-upload-btn" 
              style="padding:4px 10px;background:#3498db;color:white;border:1px solid #2980b9;cursor:pointer;">Upload</button>
          </div>
          
          ${filmToEdit && filmToEdit.image ? `
          <div style="margin-top:10px;border:1px solid #ACA899;padding:8px;background:#fff;">
            <p style="margin:0 0 5px 0;font-weight:bold;">Image actuelle:</p>
            <img src="${filmToEdit.image}" alt="Aper√ßu" style="max-width:200px;max-height:120px;">
          </div>
          ` : ''}
        </div>
        
        <div style="margin-bottom:15px;">
          <label for="film-bande-annonce" style="display:block;margin-bottom:5px;font-weight:bold;">URL de la bande annonce</label>
          <input type="text" id="film-bande-annonce" name="bandeAnnonce" value="${filmToEdit ? filmToEdit.bandeAnnonce : ''}" 
            style="width:100%;padding:5px;border:1px solid #ACA899;border-radius:3px;">
        </div>
        
        <div style="margin-top:20px;">
          <button type="submit" style="background:#0058a8;color:white;border:1px solid #003f7d;padding:6px 12px;border-radius:3px;cursor:pointer;">
            ${filmToEdit ? 'Enregistrer' : 'Ajouter'}
          </button>
          <button type="button" id="film-cancel-btn" style="margin-left:10px;padding:6px 12px;border-radius:3px;cursor:pointer;">
            Annuler
          </button>
        </div>
      </form>
    `;
    
    // Ajouter les gestionnaires d'√©v√©nements
    this.initFilmFormEvents(filmId);
  },
  
  // Initialisation des √©v√©nements du formulaire film
  initFilmFormEvents(filmId) {
    // Bouton parcourir
    document.getElementById('film-browse-btn')?.addEventListener('click', () => {
      document.getElementById('film-image-upload')?.click();
    });
    
    // Bouton upload
    document.getElementById('film-upload-btn')?.addEventListener('click', () => {
      const fileInput = document.getElementById('film-image-upload');
      if (fileInput?.files.length > 0) {
        this.uploadFilmImage();
      } else {
        this.showNotification("Veuillez d'abord s√©lectionner une image", 'warning');
      }
    });
    
    // Bouton annuler
    document.getElementById('film-cancel-btn')?.addEventListener('click', () => {
      this.loadDashboard();
    });
    
    // Formulaire
    document.getElementById('film-form')?.addEventListener('submit', (e) => {
      e.preventDefault();
      this.saveFilm(filmId);
    });
  },
  
  // Upload d'une image de film
  uploadFilmImage() {
    const fileInput = document.getElementById('film-image-upload');
    const imageInput = document.getElementById('film-image');
    
    if (!fileInput || !fileInput.files.length) {
      this.showNotification("Veuillez s√©lectionner une image", 'warning');
      return;
    }
    
    const file = fileInput.files[0];
    if (!file.type.startsWith('image/')) {
      this.showNotification("Veuillez s√©lectionner un fichier image valide", 'error');
      return;
    }
    
    // V√©rifier le token GitHub
    if (!GITHUB_CONFIG.token) {
      this.showNotification("Token GitHub manquant. L'upload ne sera pas persistant.", 'warning');
    }
    
    // Marquer le d√©but de l'upload
    this.state.isUploading = true;
    this.showNotification('Upload en cours...', 'info');
    
    // Utiliser MediaManager si disponible, sinon fallback
    if (typeof MediaManager !== 'undefined' && typeof MediaManager.uploadImage === 'function') {
      MediaManager.uploadImage(file, 'images/films')
        .then(imageUrl => {
          if (imageUrl) {
            imageInput.value = imageUrl;
            this.showNotification('Image upload√©e avec succ√®s', 'success');
            
            // Afficher un aper√ßu
            this.displayImagePreview(imageUrl, imageInput);
          } else {
            throw new Error("L'upload a √©chou√©");
          }
        })
        .catch(error => {
          console.error('Erreur upload:', error);
          this.showNotification(`Erreur: ${error.message}`, 'error');
        })
        .finally(() => {
          this.state.isUploading = false;
        });
    } else {
      // Fallback √† l'ancienne m√©thode
      this.legacyUploadImage(file, imageInput);
    }
  },
  
  // M√©thode de repli pour l'upload d'image
  legacyUploadImage(file, imageInput) {
    // Code de l'ancienne m√©thode d'upload
    if (typeof compressImage === 'function') {
      compressImage(file, 800, 0.85).then(compressedFile => {
        this.uploadImageToGitHub(compressedFile, file.name, imageInput);
      }).catch(error => {
        console.error('Erreur compression:', error);
        this.showNotification("Erreur lors de la compression de l'image", 'error');
        this.state.isUploading = false;
      });
    } else {
      this.uploadImageToGitHub(file, file.name, imageInput);
    }
  },
  
  // Affichage d'un aper√ßu d'image
  displayImagePreview(imageUrl, imageInput) {
    const previewDiv = document.createElement('div');
    previewDiv.style.marginTop = '10px';
    previewDiv.style.border = '1px solid #ACA899';
    previewDiv.style.padding = '8px';
    previewDiv.style.background = '#fff';
    
    previewDiv.innerHTML = `
      <p style="margin:0 0 5px 0;font-weight:bold;">Image upload√©e:</p>
      <img src="${imageUrl}" alt="Aper√ßu" style="max-width:200px;max-height:120px;">
    `;
    
    // Remplacer l'aper√ßu existant ou ajouter le nouveau
    const existingPreview = imageInput.parentElement.querySelector('div[style*="margin-top:10px"]');
    if (existingPreview) {
      imageInput.parentElement.replaceChild(previewDiv, existingPreview);
    } else {
      imageInput.parentElement.appendChild(previewDiv);
    }
  },
  
  // Sauvegarde d'un film
  saveFilm(filmId) {
    // Cr√©ation de l'objet film
    const filmData = {
      id: filmId || Date.now(),
      titre: document.getElementById('film-titre')?.value || '',
      note: parseInt(document.getElementById('film-note')?.value) || 0,
      critique: document.getElementById('film-critique')?.value || '',
      image: document.getElementById('film-image')?.value || '',
      bandeAnnonce: document.getElementById('film-bande-annonce')?.value || '',
      galerie: [],
      liens: []
    };
    
    // Conserver les donn√©es existantes pour les tableaux
    if (filmId && typeof films !== 'undefined') {
      const existingFilm = films.find(f => f.id === filmId);
      if (existingFilm) {
        filmData.galerie = existingFilm.galerie || [];
        filmData.liens = existingFilm.liens || [];
      }
    }
    
    // Ajouter ou mettre √† jour le film
    if (typeof films !== 'undefined') {
      if (filmId) {
        // Mettre √† jour le film existant
        const index = films.findIndex(f => f.id === filmId);
        if (index !== -1) {
          films[index] = filmData;
        }
      } else {
        // Ajouter un nouveau film
        films.push(filmData);
      }
      
      // Sauvegarder les donn√©es
      this.saveAllData();
      
      // Afficher une notification
      this.showNotification('Film sauvegard√© avec succ√®s', 'success');
      
      // Retourner au tableau de bord
      this.loadFilmsList();
    } else {
      this.showNotification("Erreur: La variable 'films' n'est pas d√©finie", 'error');
    }
  },
  
  // Chargement de la liste des films
  loadFilmsList() {
    console.log('üìã Chargement de la liste des films');
    this.state.activeTab = 'films-list';
    
    const contentDiv = document.getElementById('admin-content');
    if (!contentDiv) return;
    
    // V√©rifier si les films sont disponibles
    if (typeof films === 'undefined' || !Array.isArray(films)) {
      contentDiv.innerHTML = `
        <h3 style="color:#0058a8;margin-top:0;border-bottom:1px solid #ACA899;padding-bottom:5px;margin-bottom:15px;">
          Gestion des films
        </h3>
        <p>Aucun film disponible. La variable 'films' n'est pas d√©finie.</p>
      `;
      return;
    }
    
    // Tri des films par titre
    const sortedFilms = [...films].sort((a, b) => a.titre.localeCompare(b.titre));
    
    // G√©n√©rer le HTML de la liste
    contentDiv.innerHTML = `
      <h3 style="color:#0058a8;margin-top:0;border-bottom:1px solid #ACA899;padding-bottom:5px;margin-bottom:15px;">
        Gestion des films (${films.length})
      </h3>
      
      <div style="margin-bottom:15px;">
        <button id="add-new-film-btn" style="background:#0058a8;color:white;border:1px solid #003f7d;padding:6px 12px;border-radius:3px;cursor:pointer;">
          + Ajouter un film
        </button>
      </div>
      
      <div style="margin-bottom:15px;">
        <input type="text" id="film-search" placeholder="Rechercher un film..." 
          style="width:100%;padding:8px;border:1px solid #ACA899;border-radius:3px;">
      </div>
      
      <div class="films-list" style="border:1px solid #ACA899;border-radius:3px;overflow:hidden;">
        <div style="background:#ECE9D8;padding:8px;font-weight:bold;display:grid;grid-template-columns:auto 100px 150px;">
          <div>Titre</div>
          <div>Note</div>
          <div>Actions</div>
        </div>
        
        <div id="films-container">
          ${sortedFilms.map(film => `
            <div class="film-item" data-id="${film.id}" style="padding:8px;border-top:1px solid #ACA899;display:grid;grid-template-columns:auto 100px 150px;align-items:center;">
              <div style="overflow:hidden;text-overflow:ellipsis;">
                ${film.titre}
              </div>
              <div>
                ${film.note ? '‚≠ê'.repeat(film.note) : '-'}
              </div>
              <div>
                <button class="edit-film-btn" data-id="${film.id}" style="padding:3px 8px;margin-right:5px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
                  √âditer
                </button>
                <button class="delete-film-btn" data-id="${film.id}" style="padding:3px 8px;background:#f44336;color:white;border:1px solid #d32f2f;cursor:pointer;">
                  Suppr.
                </button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
    
    // Ajouter les gestionnaires d'√©v√©nements
    document.getElementById('add-new-film-btn')?.addEventListener('click', () => this.loadFilmForm());
    
    // Recherche
    document.getElementById('film-search')?.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      this.filterFilmsList(searchTerm);
    });
    
    // Boutons d'√©dition
    document.querySelectorAll('.edit-film-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const filmId = parseInt(e.target.dataset.id);
        this.loadFilmForm(filmId);
      });
    });
    
    // Boutons de suppression
    document.querySelectorAll('.delete-film-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const filmId = parseInt(e.target.dataset.id);
        this.confirmDeleteFilm(filmId);
      });
    });
  },
  
  // Filtrage de la liste des films
  filterFilmsList(searchTerm) {
    if (typeof films === 'undefined' || !Array.isArray(films)) return;
    
    const container = document.getElementById('films-container');
    if (!container) return;
    
    // Si le terme de recherche est vide, afficher tous les films
    if (!searchTerm) {
      this.loadFilmsList();
      return;
    }
    
    // Filtrer les films par titre
    const filteredFilms = films.filter(film => 
      film.titre.toLowerCase().includes(searchTerm)
    ).sort((a, b) => a.titre.localeCompare(b.titre));
    
    // Mettre √† jour le contenu
    container.innerHTML = filteredFilms.length ? 
      filteredFilms.map(film => `
        <div class="film-item" data-id="${film.id}" style="padding:8px;border-top:1px solid #ACA899;display:grid;grid-template-columns:auto 100px 150px;align-items:center;">
          <div style="overflow:hidden;text-overflow:ellipsis;">
            ${film.titre}
          </div>
          <div>
            ${film.note ? '‚≠ê'.repeat(film.note) : '-'}
          </div>
          <div>
            <button class="edit-film-btn" data-id="${film.id}" style="padding:3px 8px;margin-right:5px;background:#ECE9D8;border:1px solid #ACA899;cursor:pointer;">
              √âditer
            </button>
            <button class="delete-film-btn" data-id="${film.id}" style="padding:3px 8px;background:#f44336;color:white;border:1px solid #d32f2f;cursor:pointer;">
              Suppr.
            </button>
          </div>
        </div>
      `).join('') : 
      '<div style="padding:15px;text-align:center;">Aucun film trouv√©</div>';
    
    // R√©attacher les gestionnaires d'√©v√©nements
    document.querySelectorAll('.edit-film-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const filmId = parseInt(e.target.dataset.id);
        this.loadFilmForm(filmId);
      });
    });
    
    document.querySelectorAll('.delete-film-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const filmId = parseInt(e.target.dataset.id);
        this.confirmDeleteFilm(filmId);
      });
    });
  },
  
  // Confirmation de suppression d'un film
  confirmDeleteFilm(filmId) {
    if (typeof films === 'undefined' || !Array.isArray(films)) return;
    
    const film = films.find(f => f.id === filmId);
    if (!film) return;
    
    if (confirm(`√ätes-vous s√ªr de vouloir supprimer le film "${film.titre}" ?`)) {
      // Supprimer le film
      const index = films.findIndex(f => f.id === filmId);
      if (index !== -1) {
        films.splice(index, 1);
        
        // Sauvegarder les donn√©es
        this.saveAllData();
        
        // Afficher une notification
        this.showNotification('Film supprim√© avec succ√®s', 'success');
        
        // Actualiser la liste
        this.loadFilmsList();
      }
    }
  },
  
  // Chargement du gestionnaire de token GitHub
  loadTokenManager() {
    console.log('üîë Chargement du gestionnaire de token GitHub');
    this.state.activeTab = 'github-token';
    
    const contentDiv = document.getElementById('admin-content');
    if (!contentDiv) return;
    
    // G√©n√©rer le HTML
    contentDiv.innerHTML = `
      <h3 style="color:#0058a8;margin-top:0;border-bottom:1px solid #ACA899;padding-bottom:5px;margin-bottom:15px;">
        Configuration du token GitHub
      </h3>
      
      <div style="margin-bottom:20px;">
        <p>Un token GitHub est n√©cessaire pour sauvegarder les donn√©es et uploader des images.</p>
        <p>Statut actuel: <span id="token-status">${GITHUB_CONFIG.token ? '‚úÖ Token configur√©' : '‚ùå Token manquant'}</span></p>
      </div>
      
      <form id="github-token-form">
        <div style="margin-bottom:15px;">
          <label for="github-token" style="display:block;margin-bottom:5px;font-weight:bold;">Token GitHub</label>
          <input type="password" id="github-token" value="${GITHUB_CONFIG.token || ''}" 
            style="width:100%;padding:5px;border:1px solid #ACA899;border-radius:3px;" required>
          <p style="margin-top:5px;font-size:small;color:#666;">
            Format: commence par 'ghp_' ou 'github_pat_' suivi de caract√®res alphanum√©riques
          </p>
        </div>
        
        <div style="margin-bottom:15px;">
          <label style="display:flex;align-items:center;cursor:pointer;">
            <input type="checkbox" id="remember-token" ${localStorage.getItem('github_token') ? 'checked' : ''}>
            <span style="margin-left:5px;">M√©moriser ce token</span>
          </label>
        </div>
        
        <div style="margin-top:20px;">
          <button type="submit" style="background:#0058a8;color:white;border:1px solid #003f7d;padding:6px 12px;border-radius:3px;cursor:pointer;">
            Enregistrer
          </button>
          <button type="button" id="token-cancel-btn" style="margin-left:10px;padding:6px 12px;border-radius:3px;cursor:pointer;">
            Annuler
          </button>
        </div>
      </form>
      
      <div style="margin-top:30px;padding:10px;background:#f5f5f5;border:1px solid #ddd;border-radius:3px;">
        <h4 style="margin-top:0;color:#333;">Comment obtenir un token GitHub</h4>
        <ol style="padding-left:20px;margin-bottom:0;">
          <li>Connectez-vous √† votre compte GitHub</li>
          <li>Acc√©dez aux param√®tres de votre profil</li>
          <li>Cliquez sur "Developer settings" puis "Personal access tokens"</li>
          <li>Cliquez sur "Generate new token"</li>
          <li>Donnez un nom √† votre token et s√©lectionnez les permissions suivantes: repo</li>
          <li>Cliquez sur "Generate token" et copiez le token g√©n√©r√©</li>
        </ol>
      </div>
    `;
    
    // Ajouter les gestionnaires d'√©v√©nements
    document.getElementById('github-token-form')?.addEventListener('submit', (e) => {
      e.preventDefault();
      this.saveGitHubToken();
    });
    
    document.getElementById('token-cancel-btn')?.addEventListener('click', () => {
      this.loadDashboard();
    });
  },
  
  // Sauvegarde du token GitHub
  saveGitHubToken() {
    const tokenInput = document.getElementById('github-token');
    const rememberCheckbox = document.getElementById('remember-token');
    
    if (!tokenInput) return;
    
    const token = tokenInput.value.trim();
    
    // Valider le format du token
    if (token && !this.isValidTokenFormat(token)) {
      this.showNotification('Format de token invalide', 'error');
      return;
    }
    
    // Mettre √† jour la configuration
    GITHUB_CONFIG.token = token;
    
    // Sauvegarder dans le stockage appropri√©
    if (rememberCheckbox?.checked) {
      localStorage.setItem('github_token', token);
    } else {
      localStorage.removeItem('github_token');
      sessionStorage.setItem('github_token', token);
    }
    
    // Afficher une notification
    this.showNotification('Token GitHub sauvegard√©', 'success');
    
    // Retourner au tableau de bord
    this.loadDashboard();
  },
  
  // Validation du format du token GitHub
  isValidTokenFormat(token) {
    return typeof token === 'string' && 
           (token.startsWith('ghp_') || token.startsWith('github_pat_')) && 
           token.length >= 40;
  },
  
  // Sauvegarde de toutes les donn√©es
  saveAllData() {
    console.log('üíæ Sauvegarde des donn√©es');
    
    // V√©rifier si la fonction de sauvegarde existe
    if (typeof saveDataToGitHub === 'function') {
      saveDataToGitHub()
        .then(() => {
          this.showNotification('Donn√©es sauvegard√©es avec succ√®s', 'success');
        })
        .catch(error => {
          console.error('Erreur sauvegarde:', error);
          this.showNotification(`Erreur de sauvegarde: ${error.message}`, 'error');
        });
    } else if (typeof saveData === 'function') {
      saveData();
      this.showNotification('Donn√©es sauvegard√©es localement', 'success');
    } else {
      console.error('Aucune fonction de sauvegarde disponible');
      this.showNotification('Erreur: Aucune fonction de sauvegarde disponible', 'error');
    }
  },
  
  // Affichage d'une notification
  showNotification(message, type = 'info') {
    console.log(`üì£ Notification (${type}): ${message}`);
    
    // Utiliser UIManager si disponible
    if (typeof UIManager !== 'undefined' && typeof UIManager.showNotification === 'function') {
      UIManager.showNotification(message, type);
    }
    // Utiliser la fonction globale si disponible
    else if (typeof showNotification === 'function') {
      showNotification(message, type);
    }
    // Fallback √† alert pour les erreurs
    else if (type === 'error') {
      alert(`Erreur: ${message}`);
    }
  },
  
  // Cr√©ation d'une fen√™tre legacy (fallback)
  createLegacyWindow(content) {
    // G√©n√©rer un ID unique pour la fen√™tre
    const winId = 'adminpanel_' + Date.now();
    
    // Cr√©er l'√©l√©ment de fen√™tre
    const win = document.createElement('div');
    win.id = winId;
    win.className = 'xp-window';
    win.style.position = 'absolute';
    win.style.width = `${this.config.defaultWidth}px`;
    win.style.height = `${this.config.defaultHeight}px`;
    win.style.left = '150px';
    win.style.top = '100px';
    win.style.zIndex = typeof getNextZIndex === 'function' ? getNextZIndex() : 9999;
    
    // Construire le contenu HTML de la fen√™tre
    win.innerHTML = `
      <div class="xp-titlebar" style="background:linear-gradient(to right,#0058a8,#2586e7,#83b3ec);color:white;padding:8px 10px;display:flex;justify-content:space-between;align-items:center;">
        <span style="display:flex;align-items:center;">
          <img src="icons/key.png" alt="Admin" style="width:16px;height:16px;margin-right:6px;">
          <span>Panneau d'administration</span>
        </span>
        <div style="display:flex;">
          <span class="xp-btn min" style="margin:0 2px;cursor:pointer;" onclick="minimizeWindow('${winId}', 'Admin', 'icons/key.png')">-</span>
          <span class="xp-btn max" style="margin:0 2px;cursor:pointer;" onclick="maxFilmWindow('${winId}')">‚ñ°</span>
          <span class="xp-btn close" style="margin:0 2px;cursor:pointer;" onclick="closeFilmWindow('${winId}')">‚úñ</span>
        </div>
      </div>
      
      ${content}
    `;
    
    // Ajouter la fen√™tre au document
    document.body.appendChild(win);
    
    // Rendre la fen√™tre draggable si la fonction existe
    if (typeof makeDraggable === 'function') {
      makeDraggable(win, winId);
    }
    
    return win;
  }
};

// Initialiser le gestionnaire quand le DOM est charg√©
document.addEventListener('DOMContentLoaded', function() {
  console.log("üöÄ Initialisation du gestionnaire de panneau d'administration am√©lior√©");
  // D√©lai pour s'assurer que toutes les d√©pendances sont charg√©es
  setTimeout(() => {
    AdminPanelManager.init();
  }, 300);
});
