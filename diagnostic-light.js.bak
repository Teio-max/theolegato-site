// Script de diagnostic l√©ger
(function() {
  console.log("=== DIAGNOSTIC L√âGER ===");
  
  // Ne pas intercepter les fonctions pour √©viter les boucles de r√©cursion
  // Au lieu de cela, surveiller les fonctions et fournir des diagnostics
  
  // Attendre que la page soit charg√©e pour v√©rifier l'√©tat des objets cl√©s
  window.addEventListener('load', function() {
    console.log("üîç Diagnostic de chargement");
    
    // V√©rification de l'√©tat des objets cl√©s
    console.log("√âtat AdminPanelManager:", typeof window.AdminPanelManager !== 'undefined' ? "D√©fini" : "Non d√©fini");
    console.log("√âtat WindowManager:", typeof window.WindowManager !== 'undefined' ? "D√©fini" : "Non d√©fini");
    console.log("√âtat createAdminPanelWindow:", typeof window.createAdminPanelWindow === 'function' ? "D√©fini" : "Non d√©fini");
    
    // Cr√©er un √©couteur pour les erreurs
    window.addEventListener('error', function(e) {
      console.error("ÔøΩ ERREUR GLOBALE:", e.message, "dans", e.filename, "ligne", e.lineno);
    });
  });
  
  console.log("‚úÖ Diagnostic-light.js initialis√© avec succ√®s");
})();
      
      // Solution de secours - utiliser directement AdminPanelManager si disponible
      if (typeof AdminPanelManager !== 'undefined' && typeof AdminPanelManager.createPanel === 'function') {
        console.log("‚ö†Ô∏è Tentative d'utilisation directe d'AdminPanelManager.createPanel");
        try {
          return AdminPanelManager.createPanel();
        } catch (err) {
          console.error("‚ùå Erreur lors de l'utilisation d'AdminPanelManager.createPanel:", err);
        }
      }
      
      // Solution de dernier recours
      console.log("‚ö†Ô∏è Cr√©ation d'une fen√™tre d'administration de secours");
      if (typeof WindowManager !== 'undefined') {
        try {
          const fallbackWindow = WindowManager.createWindow({
            title: "Administration (Secours)",
            width: 600,
            height: 400,
            content: "<div style='padding: 20px;'><h2>Panneau d'administration (Mode Secours)</h2><p>Le panneau d'administration normal n'a pas pu √™tre charg√©.</p><p>Veuillez v√©rifier la console pour plus d'informations.</p></div>"
          });
          return fallbackWindow;
        } catch (error) {
          console.error("‚ùå Erreur lors de la cr√©ation de la fen√™tre de secours:", error);
        }
      }
      
      return false;
    }
  };
  
  // Intercepte checkAdminPass pour v√©rifier son ex√©cution
  window.checkAdminPass = function(password) {
    console.log("ÔøΩ Appel √† checkAdminPass d√©tect√© avec mot de passe:", password ? "***" : "vide");
    
    if (typeof originalCheckAdminPass === 'function') {
      console.log("üîß Ex√©cution de la fonction checkAdminPass originale");
      try {
        return originalCheckAdminPass.apply(this, arguments);
      } catch (error) {
        console.error("‚ùå Erreur dans checkAdminPass:", error);
        return false;
      }
    } else {
      console.error("‚ùå La fonction checkAdminPass originale n'existe pas");
      
      // Impl√©mentation de secours basique pour checkAdminPass
      if (password === "admin") {
        console.log("‚úÖ Mot de passe correct (impl√©mentation de secours)");
        setTimeout(function() {
          window.createAdminPanelWindow();
        }, 100);
        return true;
      } else {
        console.log("‚ùå Mot de passe incorrect (impl√©mentation de secours)");
        return false;
      }
    }
  };
  
  // Apr√®s que la page est enti√®rement charg√©e
  window.addEventListener('load', function() {
    console.log("üìã Diagnostic au chargement de la page:");
    console.log("- createAdminPanelWindow existe:", typeof window.createAdminPanelWindow === 'function');
    console.log("- checkAdminPass existe:", typeof window.checkAdminPass === 'function');
    console.log("- AdminPanelManager existe:", typeof window.AdminPanelManager !== 'undefined');
    console.log("- WindowManager existe:", typeof window.WindowManager !== 'undefined');
    
    // V√©rifier les conflits potentiels dans les impl√©mentations admin
    const adminFiles = [
      'admin-fix-window.js',
      'admin-fix-simple.js',
      'admin-panel-enhanced.js',
      'admin-fix.js'
    ];
    
    console.log("üìä Analyse des fichiers admin charg√©s:");
    adminFiles.forEach(file => {
      const script = document.querySelector(`script[src="${file}"]`);
      console.log(`- ${file}: ${script ? "Charg√©" : "Non charg√©"}`);
    });
  });
  
  // Intercepter les erreurs globales
  window.addEventListener('error', function(event) {
    console.error("üö® Erreur globale d√©tect√©e:", event.message, "dans", event.filename, "ligne", event.lineno);
  });
  
  console.log("‚úÖ Diagnostic-light.js initialis√© avec succ√®s");
})();
